document.addEventListener("DOMContentLoaded", function () {
  // --- DATA ---
  const subjects = [
    {
      id: "acn",
      title: "Advanced Computer Networks",
      description:
        "A question bank and quizzes for advanced computer networks.",
    },
    {
      id: "ct",
      title: "Communication Technology",
      description: "A question bank and quizzes for communication technology.",
    },
    {
      id: "cg",
      title: "Computer Graphics",
      description: "A question bank and quizzes for computer graphics.",
    },
    {
      id: "es",
      title: "Embedded Systems",
      description: "A question bank and quizzes for embedded systems .",
    },
    {
      id: "se",
      title: "Selected Labs in Software Engineering",
      description:
        "A question bank and quizzes for selected software engineering labs.",
    },
  ];

  const lectureData = {};
  lectureData.ct = {
    1: {
      mcq: [
        {
          q: "The basic process of exchanging information from one location (source) to a destination is called _______.",
          opts: ["Modulation", "Encoding", "Communication", "Transmission"],
          answer: "Communication",
        },
        {
          q: "Which of the following is NOT a basic block of a communication system?",
          opts: ["Transmitter", "Source", "Receiver", "Communication Channel"],
          answer: "Source",
        },
        {
          q: "The component that prepares data into an appropriate format for transmission over the channel is the _______.",
          opts: ["Source", "Transmitter", "Receiver", "Channel"],
          answer: "Transmitter",
        },
        {
          q: "The process of converting a continuous-time signal to a discrete-time signal is known as _______.",
          opts: ["Quantization", "Encoding", "Sampling", "Modulation"],
          answer: "Sampling",
        },
        {
          q: "The process of converting continuous-amplitude samples into a finite set of discrete amplitude levels is called _______.",
          opts: ["Quantization", "Encoding", "Sampling", "Decoding"],
          answer: "Quantization",
        },
        {
          q: "The primary goal of a _______ is to remove redundancy and represent the signal efficiently using as few bits as possible.",
          opts: ["Channel Encoder", "Source Encoder", "Modulator", "Receiver"],
          answer: "Source Encoder",
        },
        {
          q: "The primary goal of a _______ is to add extra bits to help detect and correct errors.",
          opts: [
            "Channel Encoder",
            "Source Encoder",
            "Modulator",
            "Source Decoder",
          ],
          answer: "Channel Encoder",
        },
        {
          q: "The process of impressing information onto the amplitude, phase, or frequency of a carrier wave is called _______.",
          opts: ["Encoding", "Modulation", "Sampling", "Quantization"],
          answer: "Modulation",
        },
        {
          q: "Which of the following is a type of guided communication channel?",
          opts: ["Satellites", "Radiowaves", "Optical Fiber", "Microwaves"],
          answer: "Optical Fiber",
        },
        {
          q: "The guided medium that consists of two insulated copper wires twisted around each other to reduce EMI is called _______.",
          opts: [
            "Coaxial Cable",
            "Twisted Pair Cable",
            "Optical Fiber",
            "Waveguide",
          ],
          answer: "Twisted Pair Cable",
        },
        {
          q: "The transmission medium that is immune to electromagnetic interference (EMI) is _______.",
          opts: [
            "Coaxial Cable",
            "Optical Fiber",
            "Twisted Pair Cable",
            "STP Cable",
          ],
          answer: "Optical Fiber",
        },
        {
          q: "Hollow metallic structures that guide high-frequency signals like microwaves are known as _______.",
          opts: [
            "Coaxial Cables",
            "Waveguides",
            "Optical Fibers",
            "Twisted Pairs",
          ],
          answer: "Waveguides",
        },
        {
          q: "An undesired effect from the communication environment, usually not under our control, is called _______.",
          opts: ["Interference", "Jamming", "Noise", "Fading"],
          answer: "Noise",
        },
        {
          q: "Intentional interference aimed at destroying the quality of the transmitted signal is known as _______.",
          opts: ["Noise", "Jamming", "Interference", "Distortion"],
          answer: "Jamming",
        },
        {
          q: "The information generated by an application that needs to be transmitted is called _______.",
          opts: ["Signal", "Data", "Channel", "Noise"],
          answer: "Data",
        },
        {
          q: "The representation of data in a communication system, such as electricity in a wire, is called a _______.",
          opts: ["Signal", "Data", "Source", "Channel"],
          answer: "Signal",
        },
        {
          q: "A traditional telephone system is an example of which combination?",
          opts: [
            "Analog Data, Digital Signal",
            "Analog Data, Analog Signal",
            "Digital Data, Digital Signal",
            "Digital Data, Analog Signal",
          ],
          answer: "Analog Data, Analog Signal",
        },
        {
          q: "Voice over IP (VoIP) is a common example of which combination?",
          opts: [
            "Analog Data, Digital Signal",
            "Analog Data, Analog Signal",
            "Digital Data, Digital Signal",
            "Digital Data, Analog Signal",
          ],
          answer: "Analog Data, Digital Signal",
        },
        {
          q: "Modern computer networks like Ethernet and Wi-Fi typically use which combination?",
          opts: [
            "Analog Data, Analog Signal",
            "Analog Data, Digital Signal",
            "Digital Data, Digital Signal",
            "Digital Data, Analog Signal",
          ],
          answer: "Digital Data, Digital Signal",
        },
      ],
      tf: [
        {
          q: "The OSI model consists of 7 layers.",
          answer: "True",
          correction: "",
        },
        {
          q: "A receiver prepares the data in an appropriate format to be transmitted over the channel.",
          answer: "False",
          correction: "The transmitter does this.",
        },
        {
          q: "In the Analog-to-Digital conversion process, quantization happens before sampling.",
          answer: "False",
          correction: "Sampling is the first step.",
        },
        {
          q: "Source encoding's main focus is to add redundancy for error correction.",
          answer: "False",
          correction: "Its focus is to remove redundancy (compression).",
        },
        {
          q: "MP3 compression is an example of source encoding.",
          answer: "True",
          correction: "",
        },
        {
          q: "The channel encoder's goal is to improve reliability by adding extra bits for error control.",
          answer: "True",
          correction: "",
        },
        {
          q: "Twisting the wires in a twisted-pair cable increases electromagnetic interference (EMI).",
          answer: "False",
          correction: "It reduces EMI.",
        },
        {
          q: "Coaxial cables offer better protection against external noise compared to unshielded twisted pair cables.",
          answer: "True",
          correction: "",
        },
        {
          q: "Optical fibers transmit data using electrical signals.",
          answer: "False",
          correction: "They use light signals.",
        },
        {
          q: "A satellite is an example of a guided communication channel.",
          answer: "False",
          correction: "It is an unguided channel.",
        },
        {
          q: "Jamming is an unintentional form of interference.",
          answer: "False",
          correction: "It is intentional.",
        },
        {
          q: "A digital pulse signal maintains its perfect shape as it travels over long distances.",
          answer: "False",
          correction: "The signal degrades and needs regeneration.",
        },
        {
          q: "In a communication system, the terms 'data' and 'signal' are interchangeable and mean the exact same thing.",
          answer: "False",
          correction:
            "Data is the information, and the signal is its physical representation.",
        },
        {
          q: "A modem used in early internet connections is an example of Digital Data, Digital Signal.",
          answer: "False",
          correction: "It's an example of Digital Data, Analog Signal.",
        },
      ],
    },
    // You can add Lecture 2 data here in the future, like this:
    // 2: { mcq: [...], tf: [...] }
  };

  let currentSubject = {};
  let quizQuestions = [];
  let lectureSelectionMode = "view";

  const pageElements = {
    home: document.getElementById("homePage"),
    subject: document.getElementById("subjectPage"),
    lectureSelection: document.getElementById("lectureSelectionPage"),
    lectureDetail: document.getElementById("lectureDetailPage"),
    quiz: document.getElementById("quizPage"),
  };
  const UIElements = {
    subjectsGrid: document.getElementById("subjectsGrid"),
    subjectTitle: document.getElementById("subjectTitle"),
    lectureSelectionTitle: document.getElementById("lectureSelectionTitle"),
    lectureGrid: document.getElementById("lectureGrid"),
    lectureDetailTitle: document.getElementById("lectureDetailTitle"),
    lectureDetailContent: document.getElementById("lectureDetailContent"),
    quizTitle: document.getElementById("quizTitle"),
    quizForm: document.getElementById("quizForm"),
    quizResults: document.getElementById("quizResults"),
    backToHomeBtn: document.getElementById("backToHomeButton"),
    backToSubjectBtn: document.getElementById("backToSubjectButton"),
    backToLecturesBtn: document.getElementById("backToLecturesButton"),
    backToLectureSelectionFromQuizBtn: document.getElementById(
      "backToLectureSelectionFromQuizButton"
    ),
    questionBankBtn: document.getElementById("questionBankButton"),
    quizBtn: document.getElementById("quizButton"),
    submitQuizBtn: document.getElementById("submitQuizButton"),
  };

  function transitionTo(activePage) {
    Object.values(pageElements).forEach((page) => {
      const isActive = page.classList.contains("active");
      if (page === activePage) {
        page.classList.remove("hidden-left", "hidden-right");
        page.classList.add("active");
      } else {
        if (isActive) page.classList.add("hidden-left");
        page.classList.remove("active");
      }
    });
  }

  function showHomePage() {
    transitionTo(pageElements.home);
  }
  function showSubjectPage(subject) {
    currentSubject = subject;
    UIElements.subjectTitle.textContent = subject.title;
    transitionTo(pageElements.subject);
  }

  function showLectureSelectionPage(mode) {
    lectureSelectionMode = mode;
    UIElements.lectureSelectionTitle.textContent = `${
      currentSubject.title
    } - Select a Lecture for ${mode === "view" ? "Review" : "Quiz"}`;
    populateLectures();
    transitionTo(pageElements.lectureSelection);
  }

  function showLectureDetailPage(lectureNum) {
    UIElements.lectureDetailTitle.textContent = `${currentSubject.title} - Lecture ${lectureNum}`;
    populateLectureDetails(lectureNum);
    transitionTo(pageElements.lectureDetail);
  }

  function populateLectures() {
    UIElements.lectureGrid.innerHTML = "";
    for (let i = 1; i <= 20; i++) {
      const btn = document.createElement("div");
      btn.className = "lecture-button";
      btn.textContent = `Lecture ${i}`;
      if (lectureSelectionMode === "view") {
        btn.onclick = () => showLectureDetailPage(i);
      } else {
        // mode === 'quiz'
        btn.onclick = () => startQuiz(i);
      }
      UIElements.lectureGrid.appendChild(btn);
    }
  }

  function populateLectureDetails(lectureNum) {
    UIElements.lectureDetailContent.innerHTML = "";
    const data = lectureData[currentSubject.id]?.[lectureNum];
    if (!data) {
      UIElements.lectureDetailContent.innerHTML =
        "<h3>No questions available for this lecture yet.</h3>";
      return;
    }

    const mcqHtml = `<div class="question-section"><h3>MCQ Questions</h3>${data.mcq
      .map(
        (q) =>
          `<div class="question"><p>${q.q}</p><ul>${q.opts
            .map(
              (opt) =>
                `<li class="${
                  opt === q.answer ? "correct-answer" : ""
                }">${opt}</li>`
            )
            .join("")}</ul></div>`
      )
      .join("")}</div>`;
    const tfHtml = `<div class="question-section"><h3>True / False Questions</h3>${data.tf
      .map(
        (q) =>
          `<div class="question"><p>${q.q}</p><div class="answer"><b>Answer: ${
            q.answer
          }.</b> ${q.correction || ""}</div></div>`
      )
      .join("")}</div>`;
    UIElements.lectureDetailContent.innerHTML = mcqHtml + tfHtml;
  }

  function startQuiz(lectureNum) {
    const data = lectureData[currentSubject.id]?.[lectureNum];
    if (!data || (data.mcq.length === 0 && data.tf.length === 0)) {
      alert(`A quiz for Lecture ${lectureNum} is not available yet.`);
      return;
    }

    UIElements.quizTitle.textContent = `${currentSubject.title} - Quiz (Lecture ${lectureNum})`;
    UIElements.quizResults.style.display = "none";
    UIElements.submitQuizBtn.disabled = false;

    const allQuestions = [
      ...data.mcq.map((q) => ({ ...q, type: "mcq" })),
      ...data.tf.map((q) => ({ ...q, type: "tf" })),
    ];
    quizQuestions = allQuestions.sort(() => 0.5 - Math.random()).slice(0, 10);

    UIElements.quizForm.innerHTML = quizQuestions
      .map((q, index) => {
        const options =
          q.type === "mcq"
            ? q.opts
                .map(
                  (opt) =>
                    `<label><input type="radio" name="q${index}" value="${opt}">${opt}</label>`
                )
                .join("")
            : `<label><input type="radio" name="q${index}" value="True">True</label><label><input type="radio" name="q${index}" value="False">False</label>`;
        return `<div class="quiz-question" id="quiz-q${index}"><p>${
          index + 1
        }. ${q.q}</p><div class="quiz-options">${options}</div></div>`;
      })
      .join("");

    transitionTo(pageElements.quiz);
  }

  function checkQuizAnswers(event) {
    event.preventDefault();
    let score = 0;
    quizQuestions.forEach((q, index) => {
      const selected = UIElements.quizForm.querySelector(
        `input[name="q${index}"]:checked`
      );
      const questionDiv = document.getElementById(`quiz-q${index}`);
      const labels = questionDiv.querySelectorAll("label");
      if (selected) {
        const isCorrect = selected.value === q.answer;
        if (isCorrect) score++;
        labels.forEach((label) => {
          if (label.querySelector("input").value === q.answer)
            label.classList.add("correct");
          else if (
            label.querySelector("input").value === selected.value &&
            !isCorrect
          )
            label.classList.add("incorrect");
        });
      }
    });
    UIElements.quizResults.textContent = `You scored ${score} out of ${quizQuestions.length}!`;
    UIElements.quizResults.style.display = "block";
    UIElements.submitQuizBtn.disabled = true;
  }

  subjects.forEach((subject) => {
    const card = document.createElement("div");
    card.className = "subject-card";
    card.innerHTML = `<div class="card-content"><h3>${subject.title}</h3><p>${subject.description}</p></div>`;
    card.addEventListener("click", () => showSubjectPage(subject));
    UIElements.subjectsGrid.appendChild(card);
  });

  UIElements.backToHomeBtn.addEventListener("click", (e) => {
    e.preventDefault();
    showHomePage();
  });
  UIElements.backToSubjectBtn.addEventListener("click", (e) => {
    e.preventDefault();
    showSubjectPage(currentSubject);
  });
  UIElements.backToLecturesBtn.addEventListener("click", (e) => {
    e.preventDefault();
    showLectureSelectionPage("view");
  });
  UIElements.backToLectureSelectionFromQuizBtn.addEventListener(
    "click",
    (e) => {
      e.preventDefault();
      showLectureSelectionPage("quiz");
    }
  );
  UIElements.questionBankBtn.addEventListener("click", () =>
    showLectureSelectionPage("view")
  );
  UIElements.quizBtn.addEventListener("click", () =>
    showLectureSelectionPage("quiz")
  );
  UIElements.quizForm.addEventListener("submit", checkQuizAnswers);
  UIElements.submitQuizBtn.addEventListener("click", () =>
    UIElements.quizForm.requestSubmit()
  );
});
